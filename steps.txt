1->Parse the command line arguments (file1, cmd1, cmd2, and file2) and store them in variables.
2->Create a pipe using pipe.
3->Use fork to create a child process.
4->In the child process, close the read end of the pipe (fildes[0]) and use dup2 to replace the standard output (STDOUT_FILENO) with the write end of the pipe (fildes[1]).
5->Use execve to execute cmd1 with the arguments passed in. The first argument should be the command itself (cmd1), followed by any additional arguments.
6->In the parent process, close the write end of the pipe (fildes[1]) and use dup2 to replace the standard input (STDIN_FILENO) with the read end of the pipe (fildes[0]).
7->Use execve to execute cmd2 with the arguments passed in. The first argument should be the command itself (cmd2), followed by any additional arguments.
8->Finally, in the parent process, wait for the child process to complete using waitpid and close any open file descriptors.
9->Note that in steps 5 and 7, you need to provide an array of pointers to the command and its arguments. This array should end with a NULL pointer to indicate the end of the argument list. You can use malloc to allocate memory for this array and populate it with the arguments.

Also, make sure to handle any errors that may occur during the execution of the program using perror and exit.
